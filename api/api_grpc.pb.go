// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GoLitebookPluginClient is the client API for GoLitebookPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoLitebookPluginClient interface {
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
	GetDesc(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginDesc, error)
	GetBookInfo(ctx context.Context, in *GetBookInfoReq, opts ...grpc.CallOption) (*GetBookInfoResp, error)
	GetBook(ctx context.Context, in *GetBookReq, opts ...grpc.CallOption) (GoLitebookPlugin_GetBookClient, error)
	Keepalive(ctx context.Context, opts ...grpc.CallOption) (GoLitebookPlugin_KeepaliveClient, error)
}

type goLitebookPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewGoLitebookPluginClient(cc grpc.ClientConnInterface) GoLitebookPluginClient {
	return &goLitebookPluginClient{cc}
}

func (c *goLitebookPluginClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, "/api.GoLitebookPlugin/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goLitebookPluginClient) GetDesc(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginDesc, error) {
	out := new(PluginDesc)
	err := c.cc.Invoke(ctx, "/api.GoLitebookPlugin/GetDesc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goLitebookPluginClient) GetBookInfo(ctx context.Context, in *GetBookInfoReq, opts ...grpc.CallOption) (*GetBookInfoResp, error) {
	out := new(GetBookInfoResp)
	err := c.cc.Invoke(ctx, "/api.GoLitebookPlugin/GetBookInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goLitebookPluginClient) GetBook(ctx context.Context, in *GetBookReq, opts ...grpc.CallOption) (GoLitebookPlugin_GetBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GoLitebookPlugin_serviceDesc.Streams[0], "/api.GoLitebookPlugin/GetBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &goLitebookPluginGetBookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoLitebookPlugin_GetBookClient interface {
	Recv() (*GetChapterResp, error)
	grpc.ClientStream
}

type goLitebookPluginGetBookClient struct {
	grpc.ClientStream
}

func (x *goLitebookPluginGetBookClient) Recv() (*GetChapterResp, error) {
	m := new(GetChapterResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goLitebookPluginClient) Keepalive(ctx context.Context, opts ...grpc.CallOption) (GoLitebookPlugin_KeepaliveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GoLitebookPlugin_serviceDesc.Streams[1], "/api.GoLitebookPlugin/Keepalive", opts...)
	if err != nil {
		return nil, err
	}
	x := &goLitebookPluginKeepaliveClient{stream}
	return x, nil
}

type GoLitebookPlugin_KeepaliveClient interface {
	Send(*Empty) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type goLitebookPluginKeepaliveClient struct {
	grpc.ClientStream
}

func (x *goLitebookPluginKeepaliveClient) Send(m *Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goLitebookPluginKeepaliveClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoLitebookPluginServer is the server API for GoLitebookPlugin service.
// All implementations must embed UnimplementedGoLitebookPluginServer
// for forward compatibility
type GoLitebookPluginServer interface {
	Search(context.Context, *SearchReq) (*SearchResp, error)
	GetDesc(context.Context, *Empty) (*PluginDesc, error)
	GetBookInfo(context.Context, *GetBookInfoReq) (*GetBookInfoResp, error)
	GetBook(*GetBookReq, GoLitebookPlugin_GetBookServer) error
	Keepalive(GoLitebookPlugin_KeepaliveServer) error
	mustEmbedUnimplementedGoLitebookPluginServer()
}

// UnimplementedGoLitebookPluginServer must be embedded to have forward compatible implementations.
type UnimplementedGoLitebookPluginServer struct {
}

func (UnimplementedGoLitebookPluginServer) Search(context.Context, *SearchReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedGoLitebookPluginServer) GetDesc(context.Context, *Empty) (*PluginDesc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesc not implemented")
}
func (UnimplementedGoLitebookPluginServer) GetBookInfo(context.Context, *GetBookInfoReq) (*GetBookInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookInfo not implemented")
}
func (UnimplementedGoLitebookPluginServer) GetBook(*GetBookReq, GoLitebookPlugin_GetBookServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedGoLitebookPluginServer) Keepalive(GoLitebookPlugin_KeepaliveServer) error {
	return status.Errorf(codes.Unimplemented, "method Keepalive not implemented")
}
func (UnimplementedGoLitebookPluginServer) mustEmbedUnimplementedGoLitebookPluginServer() {}

// UnsafeGoLitebookPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoLitebookPluginServer will
// result in compilation errors.
type UnsafeGoLitebookPluginServer interface {
	mustEmbedUnimplementedGoLitebookPluginServer()
}

func RegisterGoLitebookPluginServer(s grpc.ServiceRegistrar, srv GoLitebookPluginServer) {
	s.RegisterService(&_GoLitebookPlugin_serviceDesc, srv)
}

func _GoLitebookPlugin_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoLitebookPluginServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GoLitebookPlugin/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoLitebookPluginServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoLitebookPlugin_GetDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoLitebookPluginServer).GetDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GoLitebookPlugin/GetDesc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoLitebookPluginServer).GetDesc(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoLitebookPlugin_GetBookInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoLitebookPluginServer).GetBookInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GoLitebookPlugin/GetBookInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoLitebookPluginServer).GetBookInfo(ctx, req.(*GetBookInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoLitebookPlugin_GetBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBookReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoLitebookPluginServer).GetBook(m, &goLitebookPluginGetBookServer{stream})
}

type GoLitebookPlugin_GetBookServer interface {
	Send(*GetChapterResp) error
	grpc.ServerStream
}

type goLitebookPluginGetBookServer struct {
	grpc.ServerStream
}

func (x *goLitebookPluginGetBookServer) Send(m *GetChapterResp) error {
	return x.ServerStream.SendMsg(m)
}

func _GoLitebookPlugin_Keepalive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoLitebookPluginServer).Keepalive(&goLitebookPluginKeepaliveServer{stream})
}

type GoLitebookPlugin_KeepaliveServer interface {
	SendAndClose(*Empty) error
	Recv() (*Empty, error)
	grpc.ServerStream
}

type goLitebookPluginKeepaliveServer struct {
	grpc.ServerStream
}

func (x *goLitebookPluginKeepaliveServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goLitebookPluginKeepaliveServer) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GoLitebookPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.GoLitebookPlugin",
	HandlerType: (*GoLitebookPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _GoLitebookPlugin_Search_Handler,
		},
		{
			MethodName: "GetDesc",
			Handler:    _GoLitebookPlugin_GetDesc_Handler,
		},
		{
			MethodName: "GetBookInfo",
			Handler:    _GoLitebookPlugin_GetBookInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBook",
			Handler:       _GoLitebookPlugin_GetBook_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Keepalive",
			Handler:       _GoLitebookPlugin_Keepalive_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
